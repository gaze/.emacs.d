* UI
** Theme/Font
#+BEGIN_SRC emacs-lisp
(straight-use-package 'solarized-theme)
(load-theme 'solarized-light)

(set-face-attribute 'default nil :font "Source Code Pro 14")
(set-face-attribute 'fixed-pitch nil :font "Source Code Pro 14")

(straight-use-package 'rainbow-delimiters)
(require 'rainbow-delimiters)
#+END_SRC

** Shell behaviors
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

(menu-bar-mode -1)

;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode -1)

;; disable startup screen
(setq inhibit-startup-screen t)

(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

(setq redisplay-dont-pause t
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

(setq mouse-wheel-follow-mouse 't)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq x-select-enable-clipboard t
    x-select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    save-place-file (concat user-emacs-directory "places")
    backup-directory-alist `(("." . ,(concat user-emacs-directory
                                             "backups"))))

#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(straight-use-package 'smart-mode-line)
(sml/setup)
(sml/apply-theme 'respectful)
#+END_SRC
* Version Control
** Magit
#+BEGIN_SRC emacs-lisp
(straight-use-package 'magit)
#+END_SRC

* Navigation/Completion
** Company/LSP
#+BEGIN_SRC emacs-lisp
(straight-use-package 'lsp-mode)
(straight-use-package 'lsp-ui)
(straight-use-package 'company-lsp)

(use-package lsp-mode :commands lsp)
(use-package lsp-ui :commands lsp-ui-mode)

(use-package company
  :init
  (setq completion-styles `(basic partial-completion emacs22 initials
                                ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
  (setq company-tooltip-align-annotations t
        company-tooltip-limit 14
        company-idle-delay 0
        company-echo-delay (if (display-graphic-p) nil 0)
        company-minimum-prefix-length 2
        company-require-match 'never
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil
        company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode shell-mode)
        company-backends '(company-capf)
        company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))
  :config
  (global-company-mode +1))

(use-package company-lsp :commands company-lsp)
(setq company-tooltip-align-annotations t)
#+END_SRC
** ido-mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
(projectile-mode +1)
#+END_SRC
* LISP
** General aesthetics/editing experience

#+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(straight-use-package 'smartparens)
;; highlight parens
(require 'paren)
(show-paren-mode t)
#+END_SRC
** Clojure

#+BEGIN_SRC emacs-lisp
(straight-use-package 'clojure-mode)
(straight-use-package 'cider)
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
#+END_SRC
** CL
#+BEGIN_SRC emacs-lisp
(straight-use-package 'sly)
(setq inferior-lisp-program "/usr/local/bin/sbcl")
#+END_SRC
* C/C++
** CCLS
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ccls)

(use-package ccls
             :hook ((cmode c++mode objc-mode cuda-mode) .
                    (lambda () (require 'ccls) (lsp))))

(setq ccls-sem-highlight-method 'font-lock)
(setq ccls-executable "/usr/bin/ccls")
#+END_SRC
* O'Caml
** OPAM
#+BEGIN_SRC emacs-lisp
(defun opam-path (path)
  (let ((opam-share-dir "/Users/gaze/.opam/4.13.1/share"))
    (concat opam-share-dir "/" path)))

(add-to-list 'load-path (opam-path "emacs/site-lisp"))
#+END_SRC
** OCP-Indent
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ocp-indent)
#+END_SRC
** Merlin
#+BEGIN_SRC emacs-lisp
(straight-use-package 'merlin)
(require 'merlin)

(add-to-list 'company-backends 'merlin-company-backend)
(add-hook 'merlin-mode-hook 'company-mode)

(setq merlin-completion-with-doc t)
(setq merlin-use-auto-complete-mode 'easy)
(setq merlin-command "/Users/gaze/.opam/4.13.1/bin/ocamlmerlin")
(setq merlin-locate-preference 'mli)
#+END_SRC
** Tuareg
#+BEGIN_SRC emacs-lisp
(straight-use-package 'tuareg)
(setq tuareg-font-lock-symbols t)

(add-hook 'tuareg-mode-hook
          (lambda ()
            (merlin-mode)
            (local-set-key (kbd "C-c C-c") 'recompile)
            (auto-fill-mode)
            (add-hook 'before-save-hook 'ocp-indent-buffer nil t)))

(setq tuareg-interactive-program "opam config exec -- ocaml -nopromptcont")

#+END_SRC
** utop Mode
#+BEGIN_SRC emacs-lisp
(straight-use-package 'utop)
(setq utop-command "opam config exec -- dune utop . -- -emacs")
(autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
(add-hook 'tuareg-mode-hook 'utop-minor-mode)
#+END_SRC
