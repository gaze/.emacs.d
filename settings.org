* UI
** Theme/Font
#+BEGIN_SRC emacs-lisp
(straight-use-package 'dracula-theme)
(load-theme 'dracula)

(set-face-attribute 'default nil :font "JetBrains Mono 14")
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono 14")

(straight-use-package 'rainbow-delimiters)
(require 'rainbow-delimiters)
#+END_SRC

** Shell behaviors
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode -1)

;; disable startup screen
(setq inhibit-startup-screen t)

(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

(setq redisplay-dont-pause t
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

(setq mouse-wheel-follow-mouse 't)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq x-select-enable-clipboard t
    x-select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    save-place-file (concat user-emacs-directory "places")
    backup-directory-alist `(("." . ,(concat user-emacs-directory
                                             "backups"))))

#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(straight-use-package 'smart-mode-line)
(sml/setup)
(sml/apply-theme 'respectful)
#+END_SRC
** Editing Experience
#+BEGIN_SRC emacs-lisp
(straight-use-package 'avy)

(global-set-key (kbd "C-:") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)
(avy-setup-default)
(global-set-key (kbd "C-c C-j") 'avy-resume)

(straight-use-package 'paredit)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC
* Version Control
** Magit
#+BEGIN_SRC emacs-lisp
(straight-use-package 'magit)
#+END_SRC

* Navigation/Completion
** Company/LSP
#+BEGIN_SRC emacs-lisp
(straight-use-package 'lsp-mode)
(straight-use-package 'lsp-ui)
(straight-use-package 'company-mode)

(use-package lsp-mode :commands lsp)
(use-package lsp-ui :commands lsp-ui-mode)

(use-package company
  :init
  (setq completion-styles `(basic partial-completion emacs22 initials
                                ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
  (setq company-tooltip-align-annotations t
        company-tooltip-limit 14
        company-idle-delay 0
        company-echo-delay (if (display-graphic-p) nil 0)
        company-minimum-prefix-length 2
        company-require-match 'never
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil
        company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode shell-mode)
        company-backends '(company-capf)
        company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))
  :config
  (global-company-mode +1))

(setq company-tooltip-align-annotations t)

(add-hook 'c-mode-hook #'lsp)
(add-hook 'c++-mode-hook #'lsp)
(add-hook 'rust-mode-hook #'lsp)
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ivy)
(straight-use-package 'counsel)
(use-package ivy :config (ivy-mode))

(global-set-key (kbd "M-x") 'counsel-M-x)

#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
(projectile-mode +1)
#+END_SRC
* LISP
** General aesthetics/editing experience
#+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;; highlight parens
(require 'paren)
(show-paren-mode t)

(straight-use-package 'smartparens)

#+END_SRC
** Clojure

#+BEGIN_SRC emacs-lisp
(straight-use-package 'clojure-mode)
(straight-use-package 'cider)
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
#+END_SRC
** CL
#+BEGIN_SRC emacs-lisp
(straight-use-package 'sly)

(use-package sly)

(sly-setup '(sly-tramp sly-mrepl sly-fancy))

(setq inferior-lisp-program "/usr/local/bin/sbcl")
#+END_SRC
** CL Remote
#+BEGIN_SRC emacs-lisp
(add-to-list 'sly-filename-translations
                   (sly-create-filename-translator
                    :machine-instance "gir-fridge"
                    :remote-host "192.168.191.131"
                    :username "gir"))
#+END_SRC
* C/C++
* Haskell
#+BEGIN_SRC emacs-lisp
(straight-use-package 'haskell-mode)
(straight-use-package 'lsp-haskell)

(use-package haskell-mode)

(use-package lsp-haskell
  :after (haskell-mode lsp-mode)
  :config
  ;; Comment/uncomment this line to see interactions between lsp client/server.
  ;; (setq lsp-log-io t)
  :custom
  ;(lsp-haskell-process-args-hie '("-d" "-l" "/tmp/hie.log"))
  ;(lsp-haskell-server-args ())
  (lsp-haskell-server-path "haskell-language-server-wrapper"))

(add-hook 'haskell-mode-hook #'lsp)
(add-hook 'haskell-literate-mode-hook #'lsp)

#+END_SRC
* Elm
#+BEGIN_SRC emacs-lisp
(straight-use-package 'elm-mode)
#+END_SRC
